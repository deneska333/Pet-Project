// Code generated by api-codegen. DO NOT EDIT.
package users

import (
        "context"
        "encoding/json"
        "fmt"
        "net/http"

        "github.com/labstack/echo/v4"
        "github.com/oapi-codegen/runtime"
        
)

// Определение типа StrictMiddlewareFunc
type StrictMiddlewareFunc func(f func(echo.Context, interface{}) (interface{}, error), operationID string) func(echo.Context, interface{}) (interface{}, error)

type Role string

const (
        Admin    Role = "admin"
        UserRole Role = "user"
)

type User struct {
        Id    *int64  `json:"id,omitempty"`
        Name  *string `json:"name,omitempty"`
        Email string  `json:"email"`
        Role  *Role   `json:"role,omitempty"`
}

type UserCreate struct {
        Name     *string `json:"name,omitempty"`
        Email    string  `json:"email"`
        Password string  `json:"password"`
        Role     *Role   `json:"role,omitempty"`
}

type UserUpdate struct {
        Name  *string `json:"name,omitempty"`
        Email *string `json:"email,omitempty"`
        Role  *Role   `json:"role,omitempty"`
}

type Error struct {
        Code    int32  `json:"code"`
        Message string `json:"message"`
}

type PostUsersJSONRequestBody = UserCreate
type PatchUsersIdJSONRequestBody = UserUpdate

type ServerInterface interface {
        GetUsers(ctx echo.Context) error
        PostUsers(ctx echo.Context) error
        DeleteUsersId(ctx echo.Context, id int64) error
        GetUsersId(ctx echo.Context, id int64) error
        PatchUsersId(ctx echo.Context, id int64) error
}

type ServerInterfaceWrapper struct {
        Handler ServerInterface
}

func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
        return w.Handler.GetUsers(ctx)
}

func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
        return w.Handler.PostUsers(ctx)
}

func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
        var id int64
        if err := runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id); err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }
        return w.Handler.DeleteUsersId(ctx, id)
}

func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
        var id int64
        if err := runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id); err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }
        return w.Handler.GetUsersId(ctx, id)
}

func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
        var id int64
        if err := runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id); err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }
        return w.Handler.PatchUsersId(ctx, id)
}

type EchoRouter interface {
        CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

func RegisterHandlers(router EchoRouter, si ServerInterface) {
        RegisterHandlersWithBaseURL(router, si, "")
}

func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
        wrapper := ServerInterfaceWrapper{Handler: si}
        router.GET(baseURL+"/users", wrapper.GetUsers)
        router.POST(baseURL+"/users", wrapper.PostUsers)
        router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
        router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
        router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
}

type StrictServerInterface interface {
        GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
        PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
        DeleteUsersId(ctx context.Context, request DeleteUsersIdRequestObject) (DeleteUsersIdResponseObject, error)
        GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
        PatchUsersId(ctx context.Context, request PatchUsersIdRequestObject) (PatchUsersIdResponseObject, error)
}

type GetUsersRequestObject struct{}
type PostUsersRequestObject struct{ Body *PostUsersJSONRequestBody }
type DeleteUsersIdRequestObject struct{ Id int64 }
type GetUsersIdRequestObject struct{ Id int64 }
type PatchUsersIdRequestObject struct {
        Id   int64
        Body *PatchUsersIdJSONRequestBody
}

type GetUsersResponseObject interface{ VisitGetUsersResponse(w http.ResponseWriter) error }
type PostUsersResponseObject interface{ VisitPostUsersResponse(w http.ResponseWriter) error }
type DeleteUsersIdResponseObject interface{ VisitDeleteUsersIdResponse(w http.ResponseWriter) error }
type GetUsersIdResponseObject interface{ VisitGetUsersIdResponse(w http.ResponseWriter) error }
type PatchUsersIdResponseObject interface{ VisitPatchUsersIdResponse(w http.ResponseWriter) error }

type GetUsers200JSONResponse []User
func (r GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}

type PostUsers201JSONResponse User
func (r PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(201)
        return json.NewEncoder(w).Encode(r)
}

type DeleteUsersId204Response struct{}
func (r DeleteUsersId204Response) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
        w.WriteHeader(204)
        return nil
}


		type GetUsersId200JSONResponse User
func (r GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}

type PatchUsersId200JSONResponse User
func (r PatchUsersId200JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}

type ErrorResponse struct {
        Code    int32  `json:"code"`
        Message string `json:"message"`
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
        return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
        ssi         StrictServerInterface
        middlewares []StrictMiddlewareFunc
}

func (sh *strictHandler) GetUsers(ctx echo.Context) error {
        request := GetUsersRequestObject{}
        handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
                return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
        }
        for _, middleware := range sh.middlewares {
                handler = middleware(handler, "GetUsers")
        }
        response, err := handler(ctx, request)
        if err != nil {
                return err
        } else if validResponse, ok := response.(GetUsersResponseObject); ok {
                return validResponse.VisitGetUsersResponse(ctx.Response())
        }
        return nil
}

func (sh *strictHandler) PostUsers(ctx echo.Context) error {
        request := PostUsersRequestObject{}
        if err := ctx.Bind(&request.Body); err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
        }
        handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
                return sh.ssi.PostUsers(ctx.Request().Context(), request.(PostUsersRequestObject))
        }
        for _, middleware := range sh.middlewares {
                handler = middleware(handler, "PostUsers")
        }
        response, err := handler(ctx, request)
        if err != nil {
                return err
        } else if validResponse, ok := response.(PostUsersResponseObject); ok {
                return validResponse.VisitPostUsersResponse(ctx.Response())
        }
        return nil
}

func (sh *strictHandler) DeleteUsersId(ctx echo.Context, id int64) error {
        request := DeleteUsersIdRequestObject{Id: id}
        handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
                return sh.ssi.DeleteUsersId(ctx.Request().Context(), request.(DeleteUsersIdRequestObject))
        }
        for _, middleware := range sh.middlewares {
                handler = middleware(handler, "DeleteUsersId")
        }
        response, err := handler(ctx, request)
        if err != nil {
                return err
        } else if validResponse, ok := response.(DeleteUsersIdResponseObject); ok {
                return validResponse.VisitDeleteUsersIdResponse(ctx.Response())
        }
        return nil
}

func (sh *strictHandler) GetUsersId(ctx echo.Context, id int64) error {
        request := GetUsersIdRequestObject{Id: id}
        handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
                return sh.ssi.GetUsersId(ctx.Request().Context(), request.(GetUsersIdRequestObject))
        }
        for _, middleware := range sh.middlewares {
                handler = middleware(handler, "GetUsersId")
        }
        response, err := handler(ctx, request)
        if err != nil {
                return err
        } else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
                return validResponse.VisitGetUsersIdResponse(ctx.Response())
        }
        return nil
}

func (sh *strictHandler) PatchUsersId(ctx echo.Context, id int64) error {
        request := PatchUsersIdRequestObject{Id: id}
        if err := ctx.Bind(&request.Body); err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
        }
        handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
                return sh.ssi.PatchUsersId(ctx.Request().Context(), request.(PatchUsersIdRequestObject))
        }
        for _, middleware := range sh.middlewares {
                handler = middleware(handler, "PatchUsersId")
        }
        response, err := handler(ctx, request)
        if err != nil {
                return err
        } else if validResponse, ok := response.(PatchUsersIdResponseObject); ok {
                return validResponse.VisitPatchUsersIdResponse(ctx.Response())
        }
        return nil
}
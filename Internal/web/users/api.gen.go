// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package users

import (
        "encoding/json"
        "fmt"
        "net/http"

        "github.com/labstack/echo/v4"
        "github.com/oapi-codegen/runtime"
)

// Role defines model for Role.
type Role string

// Constants for Role values
const (
        Admin    Role = "admin"
        UserRole Role = "user"
)

// User defines model for User.
type User struct {
        Id    *int64  `json:"id,omitempty"`
        Name  *string `json:"name,omitempty"`
        Email string  `json:"email"`
        Role  *Role   `json:"role,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
        Name     *string `json:"name,omitempty"`
        Email    string  `json:"email"`
        Password string  `json:"password"`
        Role     *Role   `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
        Name  *string `json:"name,omitempty"`
        Email *string `json:"email,omitempty"`
        Role  *Role   `json:"role,omitempty"`
}

// Error defines model for Error.
type Error struct {
        Code    int32  `json:"code"`
        Message string `json:"message"`
}

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// PatchUsersIdJSONRequestBody defines body for PatchUsersId for application/json ContentType.
type PatchUsersIdJSONRequestBody = UserUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
        // Get all users
        // (GET /users)
        GetUsers(ctx echo.Context) error
        // Create a new user
        // (POST /users)
        PostUsers(ctx echo.Context) error
        // Delete a user by ID
        // (DELETE /users/{id})
        DeleteUsersId(ctx echo.Context, id int64) error
        // Get a user by ID
        // (GET /users/{id})
        GetUsersId(ctx echo.Context, id int64) error
        // Update a user by ID
        // (PATCH /users/{id})
        PatchUsersId(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
        Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
        var err error

        // Invoke the callback with all the unmarshaled arguments
        err = w.Handler.GetUsers(ctx)
        return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
        var err error

        // Invoke the callback with all the unmarshaled arguments
        err = w.Handler.PostUsers(ctx)
        return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
        var err error
        // ------------- Path parameter "id" -------------
        var id int64
        err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
        if err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }

        // Invoke the callback with all the unmarshaled arguments
        err = w.Handler.DeleteUsersId(ctx, id)
        return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
        var err error
        // ------------- Path parameter "id" -------------
        var id int64
        err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
        if err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }

        // Invoke the callback with all the unmarshaled arguments
        err = w.Handler.GetUsersId(ctx, id)
        return err
}

// PatchUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
        var err error
        // ------------- Path parameter "id" -------------
        var id int64
        err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
        if err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
        }

        // Invoke the callback with all the unmarshaled arguments
        err = w.Handler.PatchUsersId(ctx, id)
        return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
        CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
        TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
        RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
        wrapper := ServerInterfaceWrapper{Handler: si}
        router.GET(baseURL+"/users", wrapper.GetUsers)
        router.POST(baseURL+"/users", wrapper.PostUsers)
        router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
        router.GET(baseURL+"/users/:id/tasks", wrapper.GetUsersId)
        router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
}

// GetUsersRequestObject defines request parameters for GetUsers operation.
type GetUsersRequestObject struct{}

// PostUsersRequestObject defines request parameters for PostUsers operation.
type PostUsersRequestObject struct{ Body *PostUsersJSONRequestBody }

// DeleteUsersIdRequestObject defines request parameters for DeleteUsersId operation.
type DeleteUsersIdRequestObject struct{ Id int64 }

// GetUsersIdRequestObject defines request parameters for GetUsersId operation.
type GetUsersIdRequestObject struct{ Id int64 }

// PatchUsersIdRequestObject defines request parameters for PatchUsersId operation.
type PatchUsersIdRequestObject struct {
        Id   int64
        Body *PatchUsersIdJSONRequestBody
}

// GetUsersResponseObject defines server response for GetUsers operation.
type GetUsersResponseObject interface {
        VisitGetUsersResponse(w http.ResponseWriter) error
}

// PostUsersResponseObject defines server response for PostUsers operation.
type PostUsersResponseObject interface {
        VisitPostUsersResponse(w http.ResponseWriter) error
}

// DeleteUsersIdResponseObject defines server response for DeleteUsersId operation.
type DeleteUsersIdResponseObject interface {
        VisitDeleteUsersIdResponse(w http.ResponseWriter) error
}

// GetUsersIdResponseObject defines server response for GetUsersId operation.
type GetUsersIdResponseObject interface {
        VisitGetUsersIdResponse(w http.ResponseWriter) error
}

// PatchUsersIdResponseObject defines server response for PatchUsersId operation.
type PatchUsersIdResponseObject interface {
        VisitPatchUsersIdResponse(w http.ResponseWriter) error
}

// GetUsers200JSONResponse defines component usable for generating responses with ServerResponse.StatusCode=200, ContentType=application/json.
type GetUsers200JSONResponse []User

func (r GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}

// PostUsers201JSONResponse defines component usable for generating responses with ServerResponse.StatusCode=201, ContentType=application/json.
type PostUsers201JSONResponse User

func (r PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(201)
        return json.NewEncoder(w).Encode(r)
}

// DeleteUsersId204Response defines component usable for generating responses with ServerResponse.StatusCode=204.
type DeleteUsersId204Response struct{}

func (r DeleteUsersId204Response) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
        w.WriteHeader(204)
        return nil
}

// GetUsersId200JSONResponse defines component usable for generating responses with ServerResponse.StatusCode=200, ContentType=application/json.
type GetUsersId200JSONResponse User

func (r GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}

// PatchUsersId200JSONResponse defines component usable for generating responses with ServerResponse.StatusCode=200, ContentType=application/json.
type PatchUsersId200JSONResponse User

func (r PatchUsersId200JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(200)
        return json.NewEncoder(w).Encode(r)
}